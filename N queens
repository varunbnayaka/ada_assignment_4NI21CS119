#include <iostream> 
#include <vector> 
using namespace std; 
bool isSafe(const vector<vector<int>>& board, int row, int col, int N) 
{ for (int i = 0; i < row; ++i) { if (board[i][col] == 1) { 
return false; 
 } } for (int i = row, j = col; i >= 0 && j 
>= 0; --i, --j) { if (board[i][j] == 1) { 
return false;
} } for (int i = row, j = col; i >= 0 && j 
< N; --i, ++j) { if (board[i][j] == 1) { 
return false; 
 } } 
return true; 
} bool solveNQueensUtil(vector<vector<int>>& board, int row, int 
N) { if (row == N) { return true; 
 } for (int col = 0; col < N; ++col) { 
if (isSafe(board, row, col, N)) { 
board[row][col] = 1; if 
(solveNQueensUtil(board, row + 1, N)) { 
return true; 
 } board[row][col] = 
0; // Backtrack 
 } } 
return false; 
} void solveNQueens(int N) { 
vector<vector<int>> board(N, vector<int>(N, 0)); 
if (!solveNQueensUtil(board, 0, N)) { cout 
<< "No solution exists." << endl; return; 
} for (const auto& row : board) { for 
(int cell : row) { cout << (cell == 1 ? 
" 1 " : " 0 "); 
 } 
cout << endl; 
 } 
} int main() { int N; cout 
<< "Enter the value of N: "; cin 
>> N; solveNQueens(N); return 
0; 
}
